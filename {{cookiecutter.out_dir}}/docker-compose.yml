version: '3.7'
x-images:
  env: &env {env_file: [.env, docker.env]}
  symfony: &symfony
    <<: [ *env ]
    tty: true
    environment: &symfony_env
      APP_ENV: "${APP_ENV:-dev}"
      APP_SECRET: "${APP_SECRET:-77fd8b950969a6909c46ab0b6fd5d062}"
    depends_on:
    - db
    - setup-postgres
    {%if cookiecutter.with_redis%}- redis{%endif%}
    working_dir: /code/app
    command:
    - /bin/sh
    - '-c'
    - >-
      :
      && dockerize -wait http://setup-postgres -timeout ${POSTGRES_STARTUP_TIMEOUT}
      && echo "launching init.sh"
      && /init.sh
    volumes:
      # - ./sys/crontab:/etc/cron.d/symfony # nope -> chown root done on that file, prefer a COPY, or a template
      - logs:/logs/
services:
  mailcatcher:
    <<: [ *env ]
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
  {%if cookiecutter.with_redis%}
  redis:
    <<: [ *env ]
    image: "fixme"
    hostname: redis
    volumes:
      - 'redis:/data'
  {%endif%}
  db:
    <<: [ *env ]
    image: "corpusops/postgres:10"
    volumes:
      - postgresql:/var/lib/postgresql/data
  nginx:
    <<: [ *env ]
    restart: always
    image: "corpusops/nginx:1.14-alpine"
    depends_on:
      - symfony
    volumes:
      - ./sys/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
      #- mediafiles:/public/media/:ro
      #- statics:/public/static/
      - logs:/logs/
    command: >
      /bin/sh -c ": \
      && v=/etc/nginx/conf.d/default.conf
      && frep ${nginxvhost}.template:${nginxvhost} --overwrite
      && exec /bin/supervisord.sh"
    environment:
    - SUPERVISORD_CONFIGS=/etc/supervisor.d/cron /etc/supervisor.d/nginx
  symfony:
    <<: [ *symfony ]
  cron:
    <<: [ *symfony ]
    environment:
      <<: [ *symfony_env ]
      IMAGE_MODE: cron
    depends_on:
    - symfony
  backup:
    <<: [ *env ]
    image: "corpusops/dbsmartbackup:pg10"
    restart: always
    volumes:
      - backupdb-dumps:/srv/backups/
      - backupdb-logs:/srv/backups/logs/
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - ./local/backup/setup/reconfigure.yml:/setup/reconfigure.yml:ro
  setup-postgres:
    <<: [ *env ]
    image: corpusops/pgrouting:10.1-2.5.4
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-45s}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "select 1"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@db/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout $${POSTGRES_STARTUP_TIMEOUT} \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
volumes:
  backupdb-logs:
  backupdb-dumps:
  postgresql:
  {%if cookiecutter.with_redis%}redis:{%endif%}
#  mediafiles:
#  statics:
#    name: "symfony_BASE_COMMON_statics"
#    external: false
  logs:
  mails:

