{%- set db_tag = 'post' in cookiecutter.db_mode and 'postgres' or cookiecutter.db_mode -%}
version: '3.7'
x-images:
  env: &env
    env_file: [.env, docker.env]
    environment: &env_vars
      APP_TYPE: "${APP_TYPE-{{cookiecutter.app_type}}}"
      # docker variables
      # parsed/replaced in CI via env-subst
      SYMFONY_NAME: "${SYMFONY_NAME-{{cookiecutter.symfony_project_name}}}"
      NGINX_SERVERNAME: "${NGINX_SERVERNAME-{{cookiecutter.local_domain}}}"
      NGINX_SERVER_ALIASES: "${NGINX_SERVER_ALIASES-www.{{cookiecutter.local_domain}}}"
{%- if 'post' in cookiecutter.db_mode %}
      POSTGRES_STARTUP_TIMEOUT: "${POSTGRES_STARTUP_TIMEOUT-45s}"
      POSTGRES_HOST: "${POSTGRES_HOST-db}"
      POSTGRES_PORT: "${POSTGRES_PORT-5432}"
      POSTGRES_DB: "${POSTGRES_DB-db}"
      POSTGRES_USER: "${POSTGRES_USER-user}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD-password}"
      PGPASSWD: "${POSTGRES_PASSWORD-password}"
      PGPASSWORD: "${POSTGRES_PASSWORD-password}"
      DATABASE_URL: "${DATABASE_URL-pgsql://user:password@db:5432/db}"
{%- elif cookiecutter.db_mode.startswith('m') %}
      MYSQL_HOST: "${MYSQL_HOST-db}"
      MYSQL_PORT: "${MYSQL_PORT-3306}"
      MYSQL_DATABASE: "${MYSQL_DATABASE-db}"
      MYSQL_USER: "${MYSQL_USER-user}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD-${MYSQL_PASSWORD-password}}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD-password}"
      DATABASE_URL: "${DATABASE_URL-mysql://user:password@db:3306/db}"
{%- else %}
      DB_HOST: "${DB_HOST-db}"
      DB_PORT: "${DB_PORT-{{cookiecutter.db_port}}}"
      DB_NAME: "${DB_NAME-db}"
      DB_USER: "${DB_USER-user}"
      DB_PASSWORD: "${DB_PASSWORD-password}"
{%- endif %}
      COOKIE_DOMAIN: "${COOKIE_DOMAIN-{{cookiecutter.local_domain}}}"
      ABSOLUTE_URL_SCHEME: "${ABSOLUTE_URL_SCHEME-http{%if cookiecutter.ssl_in_dev %}s{%endif%}}"
      ABSOLUTE_URL_DOMAIN: "${ABSOLUTE_URL_DOMAIN-{{cookiecutter.local_domain}}}"
      ABSOLUTE_URL_PORT: "${ABSOLUTE_URL_PORT-{%if cookiecutter.ssl_in_dev%}{{cookiecutter.local_https_port}}{% else %}{{cookiecutter.local_http_port}}{% endif %}}"
      PHP_MAX_WORKERS: "${PHP_MAX_WORKERS-10}"
      PHP_MAX_SPARE_WORKERS: "${PHP_MAX_SPARE_WORKERS-5}"
      PHP_MIN_SPARE_WORKERS: "${PHP_MIN_SPARE_WORKERS-3}"
      # This need to be changed in productionc
      MAILCATCHER_USER: "${MAILCATCHER_USER-mailcatcher}"
      MAILCATCHER_PASSWORD: "${MAILCATCHER_PASSWORD-mailcatcher}"
  {{cookiecutter.app_type}}: &{{cookiecutter.app_type}}
    <<: [ *env ]
    tty: true
    image: "${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE}:${{'{'}}{{cookiecutter.app_type.upper()}}_IMAGE_VERSION}-dev"
    environment: &{{cookiecutter.app_type}}_env
      <<: [ *env_vars ]
      PROJECT_PACKAGE: "${PROJECT_PACKAGE-{{cookiecutter.symfony_project_name}}}"
      PROJECT_DIR: "${PROJECT_DIR-/code/app/}"
      PHP_USER: "{{cookiecutter.app_type}}"
      PHP_GROUP: "{%if cookiecutter.base_os=='centos'%}apache{%else%}www-data{%endif%}"
      APP_ENV: "${APP_ENV:-prod}"
      APP_SECRET: "${APP_SECRET:-77fd8b950969a6909c46ab0b6fd5d062}"
      IMAGE_MODE: phpfpm
    depends_on:
    - db
    - setup-{{db_tag}}
{%-if cookiecutter.with_redis%}
		- redis
{%-endif%}
    working_dir: /code/app
    command:
    - /bin/sh
    - '-c'
    - >-
      dockerize -wait http://setup-{{db_tag}} -timeout 45s
      && echo "launching init.sh"
      && /init.sh
    volumes:
    # - ./sys/crontab:/etc/cron.d/symfony # nope -> chown root done on that file, prefer a COPY, or a template
    - logs:/logs/
    - publiccontrib:/code/app/public/files
    - publicbundles:/code/app/public/bundles
    - private:/code/app/private
    - cache:/code/app/var/cache
    # volume that we need to feed for nginx docker
    - webroot:/code/app/var/nginxwebroot
    - ./data:/code/data
services:
  mailcatcher:
    <<: [ *env ]
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      <<: [ *env_vars ]
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
    user: root
    entrypoint:
    - sh
    - '-c'
    - >
      chown mailhog /mails
      && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
      && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
      && su mailhog -p -c MailHog
{%-if cookiecutter.with_redis%}
  redis:
    <<: [ *env ]
    image: "{{cookiecutter.redis_image}}"
    hostname: redis
    volumes:
    - 'redis:/data'
{%-endif%}
  db:
    <<: [ *env ]
    image: "{{cookiecutter["{0}_image".format(cookiecutter.db_mode)]}}"
    volumes:
{%- if cookiecutter.db_mode.startswith('post') %}
    - postgresql:/var/lib/postgresql/data
{%- elif cookiecutter.db_mode.startswith('m') %}
    - mysql:/var/lib/mysql
{%-endif %}
  nginx:
    <<: [ *env ]
    image: "{{cookiecutter.nginx_image}}"
    depends_on:
    - {{cookiecutter.app_type}}
    - mailcatcher
    links:
    - {{cookiecutter.app_type}}:{{cookiecutter.app_type}}
    - mailcatcher:mailcatcher
    volumes:
    - ./sys/etc/nginx/vhost.conf.template:/etc/nginx/conf.d/default.conf.template
    - webroot:/code/app/public
    - publiccontrib:/code/app/public/files:ro
    - publicbundles:/code/app/public/bundles:ro
    - private:/code/app/private:ro
    - logs:/logs/
    - nginx-certs:/certs
    - ./data:/code/data
    command:
    - sh
    - '-ec'
    - |-
      export SYMFONY__HTTP_PROTECT_USER=$${SYMFONY__HTTP_PROTECT_USER:-root}
      export SYMFONY__HTTP_PROTECT_PASSWORD=$${SYMFONY__HTTP_PROTECT_PASSWORD-}
      touch /etc/htpasswd-protect
      chmod 644 /etc/htpasswd-protect
      if [ "x$$SYMFONY__HTTP_PROTECT_PASSWORD" != "x" ];then
        echo "/ htpasswd:">&2
        echo "$$SYMFONY__HTTP_PROTECT_PASSWORD"\
        | htpasswd -bim /etc/htpasswd-protect "$$SYMFONY__HTTP_PROTECT_USER"
      fi
      v=/etc/nginx/conf.d/default.conf
      frep $${v}.template:$${v} --overwrite
      exec /bin/supervisord.sh
    environment:
      <<: [ *env_vars ]
      SUPERVISORD_CONFIGS: cron nginx rsyslog
  {{cookiecutter.app_type}}:
    <<: [ *{{cookiecutter.app_type}} ]
{%- if cookiecutter.with_supervisor %}
  {{cookiecutter.app_type}}-supervisor:
    <<: [ *{{cookiecutter.app_type}} ]
    environment:
      <<: [ *{{cookiecutter.app_type}}_env ]
      IMAGE_MODE: supervisor
      NO_MIGRATE: 1
      NO_COMPOSER: 1
      NO_COLLECT_STATIC: 1
    depends_on:
    - {{cookiecutter.app_type}}
{%-endif%}
{%- if not cookiecutter.remove_cron %}
  cron:
    <<: [ *{{cookiecutter.app_type}} ]
    environment:
      <<: [ *{{cookiecutter.app_type}}_env ]
      IMAGE_MODE: cron
    depends_on:
    - {{cookiecutter.app_type}}
{% endif %}
  backup:
    <<: [ *env ]
    image: "{{cookiecutter.dbsmartbackup_image}}"
    restart: always
    volumes:
      - backupdb-dumps:/var/db_smart_backup/
      - backupdb-logs:/var/db_smart_backup/logs/
{%- if db_tag.startswith('m') %}
  setup-mysql:
    <<: [ *env ]
    image: "{{cookiecutter.mysql_image}}"
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      MYSQL_STARTUP_TIMEOUT=$${MYSQL_STARTUP_TIMEOUT-45s}
      flag=/started_$$(echo $$MYSQL_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to mysql: $$MYSQL_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "select 1;"\
        | mysql --user="$$MYSQL_USER" --password="$$MYSQL_PASSWORD" --host="$$MYSQL_HOST" \
           "$$MYSQL_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout 45s \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
{%- elif db_tag.startswith('post') %}
  setup-postgres:
    <<: [ *env ]
    image: "{{cookiecutter.postgres_image}}"
    depends_on:
    - db
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT-45s}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "{% if 'gis' in cookiecutter.db_mode%}select 1 from spatial_ref_sys limit 1;select postgis_version();{%else%}select 1{%endif%}"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@db/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout 45s \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
{%- endif %}
volumes:
  backupdb-logs:
  backupdb-dumps:
{%- if 'post' in cookiecutter.db_mode %}
  postgresql:
{%- elif cookiecutter.db_mode.startswith('m') %}
  mysql:
{%- endif %}
{%-if cookiecutter.with_redis%}
  redis:
{%-endif%}
  nginx-certs:
  webroot:
  publiccontrib:
  publicbundles:
  private:
  cache:
  logs:
  mails:

